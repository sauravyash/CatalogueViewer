/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sauravyash.catalogueviewer.ZipSelector;

import com.sauravyash.FileDrop.FileDrop;
import com.sauravyash.catalogueviewer.CatalogueViewer;
import com.sauravyash.catalogueviewer.CatalogueWindow.CatalogueFile;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.json.simple.parser.ParseException;

/**
 *
 * @author Yash
 */
public class CatalogueSelectorWindowFrame extends javax.swing.JFrame {
    
    File CatalogueZip = null;
    
    /**
     * Creates new form CatalogueWindow
     */
    public CatalogueSelectorWindowFrame() {
        initComponents();
        InitZipImgLabel();
        InitFileDrop();
        this.pack();
        CenterWindow();
        ErrorLabel.setVisible(false);
        LoadingLabel.setVisible(false);
        Title.setText("Welcome " + CatalogueViewer.UserData.FirstName);
    }
    
    private void InitFileDrop() {
        FileDrop fileDrop = new FileDrop( 
                System.out, SelectFilePanel, (java.io.File[] files) -> {
            System.out.println(files[0]);
            System.out.println(GetFileExtension(files[0]).toLowerCase());
            if (GetFileExtension(files[0]).equalsIgnoreCase("zip")) {
                SetSelectedZip(files[0]);
            } else {
                java.awt.EventQueue.invokeLater(() -> {
                    JFrame frame = new JFrame();
                    JOptionPane.showMessageDialog(frame,
                            "The file dropped is not a valid zip file!",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                });
            }
        });
    }
    
    private void InitZipImgLabel() {
        ChosenFilePanel.setVisible(false);
        try {
            System.out.println("Loc:" + System.getProperty("user.dir"));
            BufferedImage img = ImageIO.read(new File(CatalogueViewer.ResourcesFolder, "icon-zip-0.png"));
            JLabel label = ZIPFileImage;
        
            Image dimg;
            dimg = img.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(dimg);
            label.setIcon(imageIcon);
        
        } catch (IOException e) {
            System.out.println(e);
        }
    }
    
    private String GetFileExtension(File file) {
        String name = file.getName();
        int lastIndexOf = name.lastIndexOf(".");
        if (lastIndexOf == -1) {
            return ""; // empty extension
        }
        return name.substring(lastIndexOf + 1);
    }
    
    private void CenterWindow() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((dim.width - this.getSize().width) / 2, (dim.height - this.getSize().height) / 2);
    }
    
    /**
     *
     */
    public void OpenFileSelectionDialog() {
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        
        int result = fc.showOpenDialog(this);
        
        // user selects a file
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            SetSelectedZip(selectedFile);
        }
    }
    
    private void SetSelectedZip(File file){
        ChosenFilePanel.setVisible(true);
        DragNDropLabel.setVisible(false);
        CatalogueZip = file;
        
        String FileName = file.getName();
        FileNameLabel.setText(FileName);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Title = new javax.swing.JLabel();
        Subtitle = new javax.swing.JLabel();
        SelectFilePanel = new javax.swing.JPanel();
        DragNDropLabel = new javax.swing.JLabel();
        SelectZipButton = new javax.swing.JButton();
        ChosenFilePanel = new javax.swing.JPanel();
        ZIPFileImage = new javax.swing.JLabel();
        FileNameLabel = new javax.swing.JLabel();
        ContinueButton = new javax.swing.JButton();
        ErrorLabel = new javax.swing.JLabel();
        LoadingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Welcome, Anon");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 30;
        getContentPane().add(Title, gridBagConstraints);

        Subtitle.setText("Please select the catalogue that you would like to open...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        getContentPane().add(Subtitle, gridBagConstraints);

        SelectFilePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(153, 153, 153)));
        SelectFilePanel.setLayout(new java.awt.GridBagLayout());

        DragNDropLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DragNDropLabel.setText("Drag and Drop your file here or select a file...");
        DragNDropLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 37;
        gridBagConstraints.ipady = 100;
        SelectFilePanel.add(DragNDropLabel, gridBagConstraints);
        DragNDropLabel.getAccessibleContext().setAccessibleDescription("");

        SelectZipButton.setText("Select ZIP File");
        SelectZipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectZipButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        SelectFilePanel.add(SelectZipButton, gridBagConstraints);

        ChosenFilePanel.setLayout(new java.awt.GridBagLayout());

        ZIPFileImage.setText(" ");
        ZIPFileImage.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ZIPFileImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ZIPFileImage.setMaximumSize(new java.awt.Dimension(4, 4));
        ZIPFileImage.setMinimumSize(new java.awt.Dimension(2, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 26;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 11, 11);
        ChosenFilePanel.add(ZIPFileImage, gridBagConstraints);

        FileNameLabel.setText("FilenameText");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 20, 5);
        ChosenFilePanel.add(FileNameLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        SelectFilePanel.add(ChosenFilePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 24);
        getContentPane().add(SelectFilePanel, gridBagConstraints);

        ContinueButton.setText("Continue");
        ContinueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinueButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 16, 24);
        getContentPane().add(ContinueButton, gridBagConstraints);

        ErrorLabel.setForeground(new java.awt.Color(255, 0, 51));
        ErrorLabel.setText("Error: Couldn't Unzip File!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        getContentPane().add(ErrorLabel, gridBagConstraints);

        LoadingLabel.setForeground(new java.awt.Color(255, 153, 51));
        LoadingLabel.setText("Loading...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        getContentPane().add(LoadingLabel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SelectZipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectZipButtonActionPerformed
        OpenFileSelectionDialog();
    }//GEN-LAST:event_SelectZipButtonActionPerformed

    private void ContinueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinueButtonActionPerformed
        ErrorLabel.setVisible(false);
        LoadingLabel.setVisible(true);
        java.awt.EventQueue.invokeLater(() -> {
            OpenZip();
        });
    }//GEN-LAST:event_ContinueButtonActionPerformed
    
    private void OpenZip(){
        try{
            System.out.println("Catalogue Location: " + CatalogueZip.getAbsolutePath());
            this.setVisible(false);
            String CataloguePath = new FileUnzipper(CatalogueZip, CatalogueViewer.WorkingDIR.toString()).unzip();
            CatalogueViewer.CataloguePath = new File(CataloguePath);
            File manifest = new File(CatalogueViewer.CataloguePath, "manifest.json");
            try {
                CatalogueViewer.Catalogue = new CatalogueFile(manifest);
            } catch (IOException | ParseException ex) {
                throw ex;
            }
            CatalogueViewer.OpenCatalogueWindow();
            this.dispose();
        } catch (IOException | ParseException | NullPointerException e){
            this.setVisible(true);
            System.out.println(e);
            e.printStackTrace();
            ErrorLabel.setVisible(true);
            LoadingLabel.setVisible(false);
        } 
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChosenFilePanel;
    private javax.swing.JButton ContinueButton;
    private javax.swing.JLabel DragNDropLabel;
    private javax.swing.JLabel ErrorLabel;
    private javax.swing.JLabel FileNameLabel;
    private javax.swing.JLabel LoadingLabel;
    private javax.swing.JPanel SelectFilePanel;
    private javax.swing.JButton SelectZipButton;
    private javax.swing.JLabel Subtitle;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel ZIPFileImage;
    // End of variables declaration//GEN-END:variables
}
